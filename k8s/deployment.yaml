apiVersion: apps/v1
kind: Deployment
metadata:
  name: fun-food-times-user-management
  labels:
    app: fun-food-times-user-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fun-food-times-user-management
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: fun-food-times-user-management
    spec:
      containers:
        - image: <IMAGE>
          name: fun-food-times-user-management
          ports:
            - containerPort: 5000
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-url-secret
                  key: DATABASE_URL

---
apiVersion: v1
kind: Service
metadata:
  name: fun-food-times-user-management-service
spec:
  selector:
    app: fun-food-times-user-management
  ports:
    - protocol: TCP
      port: 5000        
      targetPort: 5000 
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: api-loadbalancer
spec:
  selector: {}  # This is just a placeholder. The actual routing is done by the ports.
  ports:
    - protocol: TCP
      port: 5000          # Port on the external LoadBalancer (this is what you'll access)
      targetPort: 5000  # Will route traffic to user-management service
      name: fun-food-times-user-management
  type: LoadBalancer  # Expose this service externally via the LoadBalancer